using System;

namespace ChatPacketGenerator;

public static class SourceConstants
{
    private const string GeneratedHeader = """
        // <auto-generated>
        //     Automatically generated by ChatPacketGenerator.
        //     Changes made to this file may be lost and may cause undesirable behaviour.
        // </auto-generated>
        """;

    public const string PacketGroupAttributeName = "ChatPacketGenerator.PacketGroupAttribute";
    public const string PacketAttributeName = "ChatPacketGenerator.PacketAttribute";
    public const string PacketFieldAttributeName = "ChatPacketGenerator.PacketFieldAttribute";

    public const string Attributes = $$"""
        {{GeneratedHeader}}

        namespace ChatPacketGenerator
        {
            using System;

            [AttributeUsage(AttributeTargets.Class)]
            public sealed class PacketGroupAttribute : Attribute { }

            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
            public sealed class PacketAttribute : Attribute
            {
                public required int Id { get; set; }
            }

            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter)]
            public sealed class PacketFieldAttribute : Attribute
            {
                public int Order { get; init; }
            }
        }
        """;

    public const string ParserUsings = """
        using System.Text;
        using System.Buffers;
        """;

    public const string TryReadTemplate = """
        public static bool TryRead(ref ReadOnlySequence<byte> buffer, [NotNullWhen(true)] out {0}? result)
        {
            result = default;
            var reader = new SequenceReader<byte>(buffer);
            {1}

            result = new {0}({2});
            return true;
        }
        """;

    public const string TryReadStringTemplate = """
        if (!reader.TryReadLittleEndian(out ushort __{0}_length)) return false;
        if (!reader.TryReadExact(__{0}_length, out var __{0}_sequence)) return false;
        var __{0} = Encoding.UTF8.GetString(__{0}_sequence);
        """;

    public const string TryReadIntegerTemplate = """
        if (!reader.TryReadLittleEndian(out {0} __{1})) return false;
        """;
}
