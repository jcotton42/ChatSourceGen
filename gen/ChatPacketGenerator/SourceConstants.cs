namespace ChatPacketGenerator;

public static class SourceConstants
{
    public const string GeneratedHeader = """
        // <auto-generated>
        //     Automatically generated by ChatPacketGenerator.
        //     Changes made to this file may be lost and may cause undesirable behaviour.
        // </auto-generated>

        #nullable enable
        """;

    public const string PacketGroupAttributeName = "ChatPacketGenerator.PacketGroupAttribute";
    public const string PacketAttributeName = "ChatPacketGenerator.PacketAttribute";
    public const string PacketFieldAttributeName = "ChatPacketGenerator.PacketFieldAttribute";

    public const string Attributes = $$"""
        {{GeneratedHeader}}

        namespace ChatPacketGenerator
        {
            using System;

            [AttributeUsage(AttributeTargets.Class)]
            public sealed class PacketGroupAttribute : Attribute { }

            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
            public sealed class PacketAttribute : Attribute
            {
                public required int Id { get; set; }
            }

            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter)]
            public sealed class PacketFieldAttribute : Attribute
            {
                public int Order { get; init; }
            }
        }
        """;

    public const string ParserUsings = """
        using System.Buffers;
        using System.Diagnostics.CodeAnalysis;
        using System.Text;
        using System.Runtime.CompilerServices;
        """;

    public const string ParserExtensions = """
        file static class SequenceReaderExtensions
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool TryRead(ref this SequenceReader<byte> reader, out sbyte value)
            {
                Unsafe.SkipInit(out value);
                return reader.TryRead(out Unsafe.As<sbyte, byte>(ref value));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool TryReadLittleEndian(ref this SequenceReader<byte> reader, out ushort value)
            {
                Unsafe.SkipInit(out value);
                return reader.TryReadLittleEndian(out Unsafe.As<ushort, short>(ref value));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool TryReadLittleEndian(ref this SequenceReader<byte> reader, out uint value)
            {
                Unsafe.SkipInit(out value);
                return reader.TryReadLittleEndian(out Unsafe.As<uint, int>(ref value));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool TryReadLittleEndian(ref this SequenceReader<byte> reader, out ulong value)
            {
                Unsafe.SkipInit(out value);
                return reader.TryReadLittleEndian(out Unsafe.As<ulong, long>(ref value));
            }
        }
        """;
}